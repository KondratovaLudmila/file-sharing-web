from enum import Enum

import cloudinary
from cloudinary.uploader import upload_image, destroy
from cloudinary import CloudinaryImage


from src.conf.config import settings


cloudinary.config( 
  cloud_name = settings.cloudinary.cloud_name, 
  api_key = settings.cloudinary.api_key, 
  api_secret = settings.cloudinary.api_secret
)

DEFAULT_TAG = "avatar"

class MediaCloud:
    FOLDER = settings.cloudinary.folder

    def get_public_id(self, username: str, identifier: str):
        """
        The get_public_id function takes in a username and an identifier,
            and returns the public_id of the image. The public_id is used to 
            identify images on Cloudinary's servers.
        
        :param self: Represent the instance of the class
        :param username: str: Specify the username of the user
        :param identifier: str: Specify the name of the file that will be uploaded
        :return: The public_id, which is the path to a file
        :doc-author: Trelent
        """
        
        public_id = f'{self.FOLDER}/{username}/{identifier}'

        return public_id

    async def avatar_upload(self, file, identifier) -> CloudinaryImage:
        """
        The avatar_upload function uploads an avatar image to Cloudinary, 
        and returns an uploaded CloudinaryImage object.
        
        :param self: Represent the instance of the class
        :param file: Upload the image to cloudinary
        :param public_id: Specify the public id of the image to be uploaded
        :return: A cloudinaryimage object
        :doc-author: Trelent
        """
        options = {
                    "overwrite": True,
                    "width": 300,
                    "crop": "thumb", 
                    "gravity": "faces",
                    "format": "jpeg",
                    }
        
        public_id = f'{self.FOLDER}/avatar/{identifier}'
        
        options.update({"public_id": public_id})
        
        image = upload_image(file, **options)
        
        return image
    

    async def user_image_upload(self, file, public_id: str, transformations: dict=None):
        """
        The user_image_upload function uploads an image to Cloudinary.
            
            Args:
                file (file): The image file to be uploaded.
                public_id (str): A unique identifier for the uploaded image, which will be used as its filename on Cloudinary.  This should typically be a UUID4 string generated by the client application, but can also just be a simple string like &quot;profile-picture&quot;.  If you don't want your users' images to have random filenames, then you can use this parameter instead of letting Cloudinary generate one automatically for each user's profile picture. 
        
        :param self: Represent the instance of the class
        :param file: Upload the image to cloudinary
        :param public_id: str: Specify the public id of the image
        :param transformations: dict: Pass in a dictionary of transformations to be applied to the image
        :return: A dict with the following keys:
        :doc-author: Trelent
        """
        
        options = {"public_id": public_id}
        if transformations:
            options.update(transformations)
        
        image = upload_image(file, **options)
        
        return image


    async def remove_media(self, public_id: str):
        """
        The remove_media function is used to remove a media file from Cloudinary.
                
        
        :param self: Represent the instance of a class
        :param public_id: str: Specify the public id of the media to be removed
        :return: response object
        :doc-author: Trelent
        """
        result = destroy(public_id)
        
        return result
    

storage = MediaCloud()
        



